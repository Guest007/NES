/*
 * messages.proto
 *
 * message definitions
 * ===================
 *
 * HOSTS
 * -----
 * * controller[PORT A, PORT B]
 * * motor-daemon
 * * sensor-daemon
 *
 * MESSAGES
 * --------
 * I   MOTORCOMMAND
 * * controller[PORT A.out] -> motor-daemon
 *
 * II  MOTORSTATUS
 * * motor-daemon -> controller[PORT A.in]
 *
 * III SENSORCOMMAND
 * * controller[PORT B.out] -> sensor-daemon
 *
 * IV SENSORDATA
 * * sensor-daemon -> controller[PORT B.in]
 *
 * Author: Konstantin Koslowski <konstantin.koslowski@mailbox.org>
 */

package messages;

// I MOTORCOMMAND
message motorcommand {
  enum commandType {
    LOOP    = 1;
    ACC     = 2;
    RESET   = 3;
    STATUS  = 4;
    UNKNOWN = 5;
  }
  required commandType type = 1 [default = UNKNOWN];
  required int32 motor      = 2;
  optional int32 steps      = 3;
  optional int32 acc        = 4;
}

// II MOTORSTATUS
message motorstatus {
  required int32 motor = 1;
  required int32 pos = 2;
}

// III SENSORCOMMAND
message sensorcommand {
  enum commandType {
    GET       = 1;
    CALIBRATE = 2;
    UNKNOWN   = 3;
  }
  required commandType type = 1 [default = UNKNOWN];
  required int32 sensor = 2;
}

// IV SENSORDATA
message sensordata {
  required int32 sensor = 1;
  optional int32 theta = 2;
  optional int32 phi = 3;
}
